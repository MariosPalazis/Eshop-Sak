* use case
** DONE case 1
   CLOSED: [2021-01-13 Wed 14:41]
  no user logged in
  no shopping cart by anynomous session
  user logs in
  Does user have a shopping cart?
  yes -> load it
  no -> do nothing
  remove the shopping Cart from the db
** TODO case 2
   no user logged in
   shopping Cart by anonymous session exists
   user logs in
   server asks the user if the anonymous session shopping cart wants to be added to his already existing shopping cart.
   yes -> add the anonymous shopping cart
   no -> do not add the anonymous shopping cart but it must be kept for when the user logs in.
** TODO case 3
   anonymous user
   adds products to the shopping cart




   
* DONE fixing flash messages
  CLOSED: [2021-02-05 Fri 15:53]
** testing where does flash messages work
local login ->
--> ON SUCCESS -> works
--> ON FAILURE -> works


address local login ->
--> ON SUCCESS -> works
--> ON FAILURE -> works



facebook login ->
does not work


facebook address login ->
does not work 







* the adding of a product procedure
*** product 1:
    wheel diameter,
    thickness,
    leather color,
    color of thread,
    spokes & pcs,
    color of spokes (if different),
*** product 2:
    length,
    leather color,
    color of thread,
    thickness,
** proccess
   user adds a product,
   products gets added to his shopping cart,
   shopping cart is updated,
   flash message appears, notifying the user of the change and promting him to checkout,

   if on mobile the flash message incluse a checkout link, if on desktop the flash message does
   not include a checkout link,
** tasks
*** DONE change the product model
    CLOSED: [2021-02-08 Mon 09:04]
*** DONE add the ability to add a product 
    CLOSED: [2021-02-08 Mon 09:40]
*** DONE fix stoock in thickness 
    CLOSED: [2021-02-10 Wed 07:35]
*** DONE implement the fetch 
    CLOSED: [2021-02-08 Mon 17:48]

*** DONE test and implement the leather color table
    CLOSED: [2021-02-10 Wed 07:46]

*** DONE test and implement the thread color table
    CLOSED: [2021-02-10 Wed 08:20]
*** DONE test and implement the spokes table
    CLOSED: [2021-02-10 Wed 08:35]
*** DONE test and implement color of spokes table
    CLOSED: [2021-02-10 Wed 08:40]
*** DONE send the data to the server, create route to handle it
    CLOSED: [2021-02-10 Wed 10:10]
    route and controller to receive the data done.
    enable fetch client side
*** DONE add a cancel button on the add new product procedure
    CLOSED: [2021-02-10 Wed 10:29]
*** TODO on a successfull server trip and database update the client should refresh

*** the admin routes
    admin/products.handlebars
    admin/wheel_cover.handlebars
    admin/sprayhood.handlebars
    admin/custom.handlebars


    admin/products/products.handlebars
    admin/products/wheel_cover.handlebars
    admin/products/sprayhood.handlebars
    admin/products/custom.handlebars


    admin/orders
    admin/statistics


    admin/emails/

    orders -> change status.
    
* DONE implementing the sprayhood product
  CLOSED: [2021-02-10 Wed 13:05]

* DONE find the best way to serve the products to the admin, routes, files etc.
  CLOSED: [2021-02-10 Wed 14:49]

* TODO implementing the login state and how does that intersect the shopping cart
  passport is trying to authenticate someone
  constructs a login message

  req.session.state.login = {
       loggedin: true,
       url: originurl,
       method: local,
       message: success,
  }

  the User.login accesses that object

  if the passport authentication has not been successfull cut the login proccess
  and communicate that to the user.
** log

  in the login method of the User class changed the first parameter
  from (res) to (capability) -> req.app.locals.capability


  in the postLogin method changed the second parameter from state to session
  but the actual object remained the same req.session.
  
* TODO implementing shopping cart

  the shopping cart is dependent on the session owner

** the shopping cart object
   // array of objects
   shoppingCart: [ {}, {}, ... ]

   // the object:, two properties one of them an object
   {
      product: {}
      amount: number,
   }

   // the product: // same sturcture as the database
   {
       productID: "",
       description: "",
   }

   
   
** the stateCart object
   req.session.state.stateCart = { totalAmount: 10, shoppingCart: [array] }

   shoppingCart = [ { product: [object], amount: 6 } ]

   product = {
   productID: 100,
   description: wheel cover,
   wheelDiameter: [ [object], [object] ]
   thickness: [ [object], [object] ]
   leatherColor: [ [object], [object] ]
   threadColor: [ [object], [object] ]
   spokes: [ [object], [object] ],
   colorOfSpokes: [ [object], [object] ]
   }


   wheelDiameter = [
       amount: {
          from: 10,
          to: 20,
       },
       unit: "cm",
       price: 20,
       priceUnit: "euro",
       stock: 10,
   
   ]


** the req.app.locals.products object
   req.app.locals.products = [ {object}, {object}, ]

   object = {
   productId: "100",
   description: "wheel cover",
   wheeldiameter: [ {object}, {object} ],
   .
   .
   .
   
   }

   wheelDiameter = [
       {
          amount: {
              from: 10,
              to: 20,
              }
           unit: "cm",
           price: 20,
       }
   ]

** the structure of the shopping cart
   totalPrice
   totalAmount

   req.session.state.stateCart = { totalAmount: 10, totalPrice, shoppingCart: [array] }

   shoppingCart = [ { product: object, amount: 6, price, totalPrice } ]

   product = {productID, description, [rows] } 

   rows =  [ {object} ]

  req.session.state.stateCart:
  {
     totalAmount: 10,
     totalPrice: 100,
     shoppingCart: [
                       {
                           amount: 6,
                           price: 100,
                           totalPrice: 600,
                           product: {
                                        productID: 100,
                                        description: "small ...",
                                        rows: [
                                                 {
                                                   amount: {
                                                              from: 52,
                                                              to: 100,
                                                            },
                                                     unit: "cm",
                                                     price: 20,
                                                     priceUnit: euro,
                                                     stock: 10,
                                                  },
                                                  {
                                                    amount: 20,
                                                    unit: "mm",
                                                    price: 20,
                                                    priceUnite: euro,
                                                    stock: 10,
                                                  }
                                               ]
                                      }
                       },
                       {
                       },
                       {
                       },
                    ]
   }

   shoppingCart: property(array of objects) ->
   {{each}} 
   product: property(object) ->
   rows: property(array of objects) ->
        {{each}}
          amount: object
        {{/each}}
   {{/each}}
   {{each}}


   amount
   price
   totalPrice
   productID "100"
   description
   rowsID
   rows: [
   ]
** where is the session owner defined or changed
   at server start: states2.js ->  (session owner is anonymous);
       initializeCapability(req, res, next) {
      if (app.locals.capability) {
        res.locals.capability = app.locals.capability;
        next();
      } else {
        console.log(Chalk.red.bold("{{{{   INITIALIZATION OF STATE  }}}}"));
        app.locals.capability  = new Capability();
        app.locals.capability.makeSessionOwner(req.session, "anonymous");
        next();
      }
    },

** TODO implement th updateStateCart and the transfelLocalState to the new shoppingCart lib
** TODO addProduct, getting the shoppingCart from each user (QUESTION)
   why aim i getting 

   the addProduct method of the shoppingCart class should not be accessing a users private
   shoppingCart but onlyy the global shoppingCart.
** log of actions
   removed the seedShoppingCart function from the shoppingCart class.
   i have though transfered its capability to the capability class and changed its name to
   seedState

 
* PLAN
** DONE match the client productId to the one in req.app.locals.products
   CLOSED: [2021-02-11 Thu 13:18]
** TODO delete the productId property of the payload
** create the rowsId
** search in the current session owners shopping cart for a duplicate item using the rowsId

** TODO calculate the grand total amount and grand total price

   length
   thickness
   leathercolor
   theardColor

** on user login
   is there an anonymous shopping cart?
     ---> yes
         -----> create flash message, ask the user

    ---> no
         -----> dont create flash message


         username created
** DONE add username to the res.local object
   CLOSED: [2021-02-12 Fri 14:37]
** DONE create a new navigation bar where both the username and the shopping cart may be tested
   CLOSED: [2021-02-12 Fri 15:22]
** DONE create the controllers and routes for all the products
   CLOSED: [2021-02-12 Fri 15:30]
** DONE create the controllers and routes for the shopping cart
   CLOSED: [2021-02-12 Fri 16:24]
** TODO finish the navigation bar
** TODO provide initial size values for section 1 and 2
* TODO implementing the user products
** DONE create the products partial
   CLOSED: [2021-02-11 Thu 10:24]
   
** DONE create files for each product
   CLOSED: [2021-02-11 Thu 10:25]
** DONE create the products routes
   CLOSED: [2021-02-11 Thu 11:49]
** DONE check if a change in admin is reflected on the products
   CLOSED: [2021-02-11 Thu 11:51]
** DONE instead of fetching a product from the database, get it from the req.app.locals.products
   CLOSED: [2021-02-11 Thu 13:17]
* the req.session object
  req.session.state = {}
  req.session.state = {
      user: {},
      anonymous: {},
      stateCart: {},
  }
